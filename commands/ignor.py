from vkbottle.user import Message, UserLabeler

from models import User
from utils import edit_message, get_user_id, user_id_get_mes
from validators import MyPref

bl = UserLabeler()
bl.vbml_ignore_case = True


@bl.message(MyPref(), text='<q> +–∏–≥–Ω–æ—Ä')
async def greeting(message: Message):
    user_id = await user_id_get_mes(message)
    if user_id == message.from_id:
        await edit_message(message, '–°—É–∏—Ü–∏–¥ –Ω–µ –≤—ã—Ö–æ–¥\n–≠—Ç–æ –≤—Ö–æ–¥')
        return
    user_db = await User.get(vkontakte_id=message.from_id)
    spi = eval(user_db.list_ignore)
    if user_id < 0:
        return
    if user_id in spi:
        await edit_message(message, f"üö´ –£–∂–µ –≤ –∏–≥–Ω–æ—Ä-–ª–∏—Å—Ç–µ.")
        return
    else:
        spi.append(user_id)
        user_db.list_ignore = spi
        await user_db.save()
        await edit_message(message, f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –∏–≥–Ω–æ—Ä–∞.")


@bl.message(MyPref(), text='<q> +–∏–≥–Ω–æ—Ä <url>')
async def greeting(message: Message, url: str):
    user_id = get_user_id(url)[0]
    if user_id == message.from_id:
        await edit_message(message, '–°—É–∏—Ü–∏–¥ –Ω–µ –≤—ã—Ö–æ–¥\n–≠—Ç–æ –≤—Ö–æ–¥')
        return
    user_db = await User.get(vkontakte_id=message.from_id)
    spi = eval(user_db.list_ignore)
    if user_id < 0:
        return
    if user_id in spi:
        await edit_message(message, f"üö´ –£–∂–µ –≤ –∏–≥–Ω–æ—Ä-–ª–∏—Å—Ç–µ.")
        return
    else:
        spi.append(user_id)
        user_db.list_ignore = spi
        await user_db.save()
        await edit_message(message, f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –∏–≥–Ω–æ—Ä–∞.")


@bl.message(MyPref(), text='<q> -–∏–≥–Ω–æ—Ä')
async def greeting(message: Message):
    user_id = await user_id_get_mes(message)
    if user_id == message.from_id:
        await edit_message(message, '–°—É–∏—Ü–∏–¥ –Ω–µ –≤—ã—Ö–æ–¥\n–≠—Ç–æ –≤—Ö–æ–¥')
        return
    user_db = await User.get(vkontakte_id=message.from_id)
    spi = eval(user_db.list_ignore)
    if user_id < 0:
        return
    if user_id in spi:
        spi.remove(user_id)
        user_db.list_ignore = spi
        await user_db.save()
        await edit_message(message, f"‚úÖ –£–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–≥–Ω–æ—Ä–∞.")
        return
    else:
        await edit_message(message, f"‚ùé –ù–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –∏–≥–Ω–æ—Ä–∞.")


@bl.message(MyPref(), text='<q> -–∏–≥–Ω–æ—Ä <url>')
async def greeting(message: Message, url: str):
    user_id = get_user_id(url)[0]
    if user_id == message.from_id:
        await edit_message(message, '–°—É–∏—Ü–∏–¥ –Ω–µ –≤—ã—Ö–æ–¥\n–≠—Ç–æ –≤—Ö–æ–¥')
    user_db = await User.get(vkontakte_id=message.from_id)
    spi = eval(user_db.list_ignore)
    if user_id < 0:
        return
    if user_id in spi:
        spi.remove(user_id)
        user_db.list_ignore = spi
        await user_db.save()
        await edit_message(message, f"‚úÖ –£–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–≥–Ω–æ—Ä–∞.")
        return
    else:
        await edit_message(message, f"‚ùé –ù–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –∏–≥–Ω–æ—Ä–∞.")


@bl.message(MyPref(), text='<q> –∏–≥–Ω–æ—Ä')
async def greeting(message: Message):
    txt = 'üë• –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n\n'
    user_db = await User.get(vkontakte_id=message.from_id)
    spi = eval(user_db.list_ignore)
    if len(spi) == 0:
        await edit_message(message, f"üö´ –ò–≥–Ω–æ—Ä-–ª–∏—Å—Ç –ø—É—Å—Ç.")
        return

    for ss in spi:
        a = await message.get_user(user_ids=ss)
        name = f'[id{a.id}|{a.first_name} {a.last_name}]\n'
        txt += f'{name}\n'
    await edit_message(message, txt)
